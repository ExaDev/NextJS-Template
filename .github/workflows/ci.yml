name: CI

on:
  push:
    branches: [main, beta, alpha]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Biome check
        run: npm run lint

      - name: Check TypeScript
        run: npm run type-check

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run coverage

      - name: Generate Coverage Summary
        run: |
          echo "## üìä Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse coverage summary and create detailed report
          if [ -f "coverage/coverage-summary.json" ]; then
            cat coverage/coverage-summary.json | jq -r '
              "### Overall Coverage:\n",
              "| Metric | Coverage | Threshold | Status |",
              "| --- | --- | --- | --- |",
              "| **Statements** | " + (.total.statements.pct | tostring) + "% (" + (.total.statements.covered | tostring) + "/" + (.total.statements.total | tostring) + ") | 80% | " + (if .total.statements.pct >= 80 then "‚úÖ Pass" else "‚ùå Fail" end) + " |",
              "| **Branches** | " + (.total.branches.pct | tostring) + "% (" + (.total.branches.covered | tostring) + "/" + (.total.branches.total | tostring) + ") | 70% | " + (if .total.branches.pct >= 70 then "‚úÖ Pass" else "‚ùå Fail" end) + " |",
              "| **Functions** | " + (.total.functions.pct | tostring) + "% (" + (.total.functions.covered | tostring) + "/" + (.total.functions.total | tostring) + ") | 80% | " + (if .total.functions.pct >= 80 then "‚úÖ Pass" else "‚ùå Fail" end) + " |",
              "| **Lines** | " + (.total.lines.pct | tostring) + "% (" + (.total.lines.covered | tostring) + "/" + (.total.lines.total | tostring) + ") | 80% | " + (if .total.lines.pct >= 80 then "‚úÖ Pass" else "‚ùå Fail" end) + " |"
            ' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìà [View detailed coverage report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Coverage summary file not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Coverage PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverageData.total;
              
              const formatPercent = (pct) => pct.toFixed(2) + '%';
              const getStatus = (pct, threshold) => pct >= threshold ? '‚úÖ' : '‚ùå';
              
              const comment = `## üìä Coverage Report
              
| Metric | Coverage | Threshold | Status |
| --- | --- | --- | --- |
| **Statements** | ${formatPercent(total.statements.pct)} (${total.statements.covered}/${total.statements.total}) | 80% | ${getStatus(total.statements.pct, 80)} |
| **Branches** | ${formatPercent(total.branches.pct)} (${total.branches.covered}/${total.branches.total}) | 70% | ${getStatus(total.branches.pct, 70)} |
| **Functions** | ${formatPercent(total.functions.pct)} (${total.functions.covered}/${total.functions.total}) | 80% | ${getStatus(total.functions.pct, 80)} |
| **Lines** | ${formatPercent(total.lines.pct)} (${total.lines.covered}/${total.lines.total}) | 80% | ${getStatus(total.lines.pct, 80)} |
              
*Generated by Vitest Coverage*`;
              
              // Post comment to PR
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error reading coverage data:', error);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## üìä Coverage Report\n\n‚ùå Unable to generate coverage report. Please check the test logs.'
              });
            }

      - name: Validate Coverage Thresholds
        run: |
          echo "Checking coverage thresholds against Vitest configuration..."
          
          # Check if coverage summary exists
          if [ ! -f "coverage/coverage-summary.json" ]; then
            echo "‚ùå Coverage summary not found"
            exit 1
          fi
          
          # Parse coverage and check thresholds using jq
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          echo "Current coverage:"
          echo "  Statements: ${STATEMENTS}% (threshold: 80%)"
          echo "  Branches: ${BRANCHES}% (threshold: 70%)"
          echo "  Functions: ${FUNCTIONS}% (threshold: 80%)"
          echo "  Lines: ${LINES}% (threshold: 80%)"
          
          FAILED=false
          
          if (( $(echo "$STATEMENTS < 80" | bc -l) )); then
            echo "‚ùå Statements coverage below threshold: ${STATEMENTS}% < 80%"
            FAILED=true
          fi
          
          if (( $(echo "$BRANCHES < 70" | bc -l) )); then
            echo "‚ùå Branches coverage below threshold: ${BRANCHES}% < 70%"
            FAILED=true
          fi
          
          if (( $(echo "$FUNCTIONS < 80" | bc -l) )); then
            echo "‚ùå Functions coverage below threshold: ${FUNCTIONS}% < 80%"
            FAILED=true
          fi
          
          if (( $(echo "$LINES < 80" | bc -l) )); then
            echo "‚ùå Lines coverage below threshold: ${LINES}% < 80%"
            FAILED=true
          fi
          
          if [ "$FAILED" = true ]; then
            echo "‚ùå Coverage thresholds not met"
            exit 1
          else
            echo "‚úÖ All coverage thresholds met"
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run npm audit for production dependencies only
        run: npm audit --omit=dev --audit-level=high

      - name: Check for known security issues
        run: |
          echo "Checking for high/critical vulnerabilities in production dependencies..."
          if npm audit --omit=dev --audit-level=high; then
            echo "‚úì No high/critical vulnerabilities found in production dependencies"
          else
            echo "‚úó High/critical vulnerabilities found in production dependencies"
            exit 1
          fi

  build:
    name: Build & Deploy Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-audit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Test static export
        run: |
          if [ -d "out" ]; then
            echo "‚úì Static export successful - 'out' directory created"
            ls -la out/
          else
            echo "‚úó Static export failed - 'out' directory not found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: out/
          retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-audit, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release